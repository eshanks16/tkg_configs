#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("lib/helpers.star", "get_bom_data_for_k8s_version", "kubeadm_image_repo", "get_az_from_region")
#@ load("lib/validate.star", "validate_configuration")

#@ validate_configuration("aws")

#@ bomDataForK8sVersion = get_bom_data_for_k8s_version()

#@ default_az_0 = get_az_from_region(data.values.AWS_REGION, data.values.AWS_NODE_AZ, "a")

#@overlay/match by=overlay.subset({"kind":"Cluster"})
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  infrastructureRef:
    name: #@ data.values.CLUSTER_NAME
  controlPlaneRef:
    name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
  clusterNetwork:
    pods:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.CLUSTER_CIDR
    services:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.SERVICE_CIDR

#@overlay/match by=overlay.subset({"kind":"KubeadmControlPlane"})
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
spec:
  replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
  infrastructureTemplate:
    kind: AWSMachineTemplate
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        name: '{{ ds.meta_data.local_hostname }}'
        kubeletExtraArgs:
          cloud-provider: aws
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: aws
      controllerManager:
        extraArgs:
          cloud-provider: aws
      imageRepository: #@ kubeadm_image_repo(bomDataForK8sVersion.kubeadmConfigSpec.imageRepository)
      etcd:
        local:
          imageRepository: #@ kubeadm_image_repo(bomDataForK8sVersion.kubeadmConfigSpec.etcd.local.imageRepository)
          imageTag: #@ bomDataForK8sVersion.kubeadmConfigSpec.etcd.local.imageTag
      dns:
        imageRepository: #@ kubeadm_image_repo(bomDataForK8sVersion.kubeadmConfigSpec.dns.imageRepository)
        imageTag: #@ bomDataForK8sVersion.kubeadmConfigSpec.dns.imageTag
    joinConfiguration:
      nodeRegistration:
        name: '{{ ds.meta_data.local_hostname }}'
        kubeletExtraArgs:
          cloud-provider: aws
  version: #@ data.values.KUBERNETES_VERSION
#@overlay/match by=overlay.subset({"kind": "AWSMachineTemplate", "metadata":{"name": "${CLUSTER_NAME}-control-plane"}})
---
kind: AWSMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
metadata:
  name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
spec:
  template:
    spec:
      instanceType: #@ data.values.CONTROL_PLANE_MACHINE_TYPE
      iamInstanceProfile: "control-plane.tkg.cloud.vmware.com"
      sshKeyName: #@ data.values.AWS_SSH_KEY_NAME
      ami:
        id: #@ getattr(bomDataForK8sVersion.ami, data.values.AWS_REGION).id
#@overlay/match by=overlay.subset({"kind": "AWSMachineTemplate", "metadata":{"name": "${CLUSTER_NAME}-md-0"}})
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AWSMachineTemplate
metadata:
  name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
spec:
  template:
    spec:
      instanceType: #@ data.values.NODE_MACHINE_TYPE
      iamInstanceProfile: "nodes.tkg.cloud.vmware.com"
      sshKeyName: #@ data.values.AWS_SSH_KEY_NAME
      ami:
        id: #@ getattr(bomDataForK8sVersion.ami, data.values.AWS_REGION).id
#@overlay/match by=overlay.subset({"kind":"KubeadmConfigTemplate", "metadata":{"name": "${CLUSTER_NAME}-md-0"}})
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          name: '{{ ds.meta_data.local_hostname }}'
          kubeletExtraArgs:
            cloud-provider: aws
#@overlay/match by=overlay.subset({"kind":"MachineDeployment", "metadata":{"name": "${CLUSTER_NAME}-md-0"}})
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
spec:
  clusterName: #@ data.values.CLUSTER_NAME
  replicas: #@ data.values.WORKER_MACHINE_COUNT_0
  selector:
    matchLabels: null
  template:
    metadata:
      labels:
        node-pool: #@ "{}-worker-pool".format(data.values.CLUSTER_NAME)
    spec:
      clusterName: #@ data.values.CLUSTER_NAME
      version: #@ data.values.KUBERNETES_VERSION
      bootstrap:
        configRef:
          name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AWSMachineTemplate
      failureDomain: #@ default_az_0
#@overlay/match by=overlay.subset({"kind":"MachineHealthCheck"})
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineHealthCheck
metadata:
  name: #@ data.values.CLUSTER_NAME
spec:
  clusterName: #@ data.values.CLUSTER_NAME
  nodeStartupTimeout: #@ data.values.NODE_STARTUP_TIMEOUT
  selector:
    matchLabels:
      node-pool: #@ "{}-worker-pool".format(data.values.CLUSTER_NAME)
  unhealthyConditions:
  #@overlay/match by=overlay.map_key("status")
  - type: Ready
    status: Unknown
    timeout: #@ data.values.MHC_UNKNOWN_STATUS_TIMEOUT
  #@overlay/match by=overlay.map_key("status")
  - type: Ready
    status: "False"
    timeout: #@ data.values.MHC_FALSE_STATUS_TIMEOUT
