#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")

#@ load("lib/helpers.star", "get_bom_data_for_k8s_version", "kubeadm_image_repo", "get_azure_image")
#@ load("lib/validate.star", "validate_configuration")

#@ validate_configuration("azure")

#@ bomDataForK8sVersion = get_bom_data_for_k8s_version()

#@overlay/match by=overlay.subset({"kind":"Cluster"})
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.CLUSTER_CIDR
    services:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.SERVICE_CIDR
  controlPlaneRef:
    name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
  infrastructureRef:
    name: #@ data.values.CLUSTER_NAME

#@overlay/match by=overlay.subset({"kind":"AzureCluster"})
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureCluster
metadata:
  name: #@ data.values.CLUSTER_NAME
spec:
  location: #@ data.values.AZURE_LOCATION
  networkSpec:
    vnet:
      name: #@ "{}-vnet".format(data.values.CLUSTER_NAME)
      resourceGroup: #@ data.values.AZURE_VNET_RESOURCE_GROUP or data.values.AZURE_RESOURCE_GROUP or data.values.CLUSTER_NAME
      cidrBlock: #@ data.values.AZURE_VNET_CIDR
    subnets:
    #@overlay/match by=overlay.index(0)
    #@overlay/replace
    - name: #@ data.values.AZURE_CONTROL_PLANE_SUBNET_NAME
      role: control-plane
      cidrBlock: #@ data.values.AZURE_CONTROL_PLANE_SUBNET_CIDR
    #@overlay/match by=overlay.index(1)
    #@overlay/replace
    - name: #@ data.values.AZURE_NODE_SUBNET_NAME
      role: node
      cidrBlock: #@ data.values.AZURE_NODE_SUBNET_CIDR
  resourceGroup: #@ data.values.AZURE_RESOURCE_GROUP or data.values.CLUSTER_NAME
  subscriptionID: #@ data.values.AZURE_SUBSCRIPTION_ID

#@overlay/match by=overlay.subset({"kind":"KubeadmControlPlane"})
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
kind: KubeadmControlPlane
metadata:
  name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: AzureMachineTemplate
    name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
  kubeadmConfigSpec:
    clusterConfiguration:
      imageRepository: #@ kubeadm_image_repo(bomDataForK8sVersion.kubeadmConfigSpec.imageRepository)
      etcd:
        local:
          imageRepository: #@ kubeadm_image_repo(bomDataForK8sVersion.kubeadmConfigSpec.etcd.local.imageRepository)
          imageTag: #@ bomDataForK8sVersion.kubeadmConfigSpec.etcd.local.imageTag
      dns:
        imageRepository: #@ kubeadm_image_repo(bomDataForK8sVersion.kubeadmConfigSpec.dns.imageRepository)
        imageTag: #@ bomDataForK8sVersion.kubeadmConfigSpec.dns.imageTag
      controllerManager:
        extraArgs:
          cluster-name: #@ data.values.CLUSTER_NAME
    files:
    #@overlay/match by=overlay.index(0)
    #@overlay/replace
    - contentFrom:
        secret:
          key: azure.json
          name: #@ "{}-control-plane-azure-json".format(data.values.CLUSTER_NAME)
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
  replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
  version: #@ data.values.KUBERNETES_VERSION

#@overlay/match by=overlay.subset({"kind": "AzureMachineTemplate", "metadata":{"name": "${CLUSTER_NAME}-control-plane"}})
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureMachineTemplate
metadata:
  name: #@ "{}-control-plane".format(data.values.CLUSTER_NAME)
spec:
  template:
    spec:
      #@overlay/match missing_ok=True
      image: #@ get_azure_image(bomDataForK8sVersion)
      location: #@ data.values.AZURE_LOCATION
      sshPublicKey: #@ data.values.AZURE_SSH_PUBLIC_KEY_B64
      vmSize: #@ data.values.AZURE_CONTROL_PLANE_MACHINE_TYPE

#@overlay/match by=overlay.subset({"kind":"MachineDeployment"})
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
spec:
  clusterName: #@ data.values.CLUSTER_NAME
  replicas: #@ data.values.WORKER_MACHINE_COUNT
  template:
    spec:
      bootstrap:
        configRef:
          name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
      clusterName: #@ data.values.CLUSTER_NAME
      infrastructureRef:
        name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
      version: #@ data.values.KUBERNETES_VERSION

#@overlay/match by=overlay.subset({"kind": "AzureMachineTemplate", "metadata":{"name": "${CLUSTER_NAME}-md-0"}})
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureMachineTemplate
metadata:
  name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
spec:
  template:
    spec:
      #@overlay/match missing_ok=True
      image: #@ get_azure_image(bomDataForK8sVersion)
      location: #@ data.values.AZURE_LOCATION
      sshPublicKey: #@ data.values.AZURE_SSH_PUBLIC_KEY_B64
      vmSize: #@ data.values.AZURE_NODE_MACHINE_TYPE

#@overlay/match by=overlay.subset({"kind":"KubeadmConfigTemplate"})
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: #@ "{}-md-0".format(data.values.CLUSTER_NAME)
spec:
  template:
    spec:
      files:
      #@overlay/match by=overlay.index(0)
      #@overlay/replace
      - contentFrom:
          secret:
            key: azure.json
            name: #@ "{}-md-0-azure-json".format(data.values.CLUSTER_NAME)
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: "0644"
